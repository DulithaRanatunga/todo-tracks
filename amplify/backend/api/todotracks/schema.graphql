type Comment @model 
  @key(name: "onObject", fields: ["objectID", "content"]) {
  id: ID!
  objectID: ID!  
  content: String!
}

type Event @model { 
  id: ID!
  name: String!
  trigger: AWSDateTime
  done: Boolean!
  comments: [Comment] @connection(keyName: "onObject", fields: ["id"])
  blocks: [Blocker] @connection(keyName: "blockedBy", fields: ["id"])
}

enum Status {
  BLANK
  IN_PROGRESS
  BLOCKED
  DONE
  SKIPPED
}

type Task @model 
  @key(name: "onGroup", fields: ["parent"]) {
  id: ID!
  parent: ID!
  name: String!
  next: [Task]
  comments: [Comment] @connection(keyName: "onObject", fields: ["id"])
  hasBlockers: [Blocker] @connection(keyName: "task", fields: ["id"])
  blocks: [Blocker] @connection(keyName: "blockedBy", fields: ["id"])
  status: Status!
}

enum BlockerType {
  EVENT
  TASK
}

type Blocker
  @model(queries: null)
  @key(name: "task", fields: ["task"]) 
  @key(name: "blockedBy", fields: ["blockedBy"]) {
  task: ID!
  blockedBy: ID!
  blockedByType: BlockerType!
}

type Grouping @model {
  id: ID!
  name: String!
  tasks: [Task] @connection(keyName: "onGroup", fields: ["id"])
  parent: Grouping @connection(name: "children")
  children: [Grouping] @connection(name: "children")
}